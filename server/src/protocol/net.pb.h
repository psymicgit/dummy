// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net.proto

#ifndef PROTOBUF_net_2eproto__INCLUDED
#define PROTOBUF_net_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2eproto();
void protobuf_AssignDesc_net_2eproto();
void protobuf_ShutdownFile_net_2eproto();

class ConnectReq;
class ConnectResponse;

enum NetMsgId {
  eConnectSvrReq = 1,
  eConnectSvrAck = 2
};
bool NetMsgId_IsValid(int value);
const NetMsgId NetMsgId_MIN = eConnectSvrReq;
const NetMsgId NetMsgId_MAX = eConnectSvrAck;
const int NetMsgId_ARRAYSIZE = NetMsgId_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetMsgId_descriptor();
inline const ::std::string& NetMsgId_Name(NetMsgId value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetMsgId_descriptor(), value);
}
inline bool NetMsgId_Parse(
    const ::std::string& name, NetMsgId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetMsgId>(
    NetMsgId_descriptor(), name, value);
}
enum ConnectResult {
  CONNECT_OK = 0,
  CONNECT_FAIL_UNKNOWN_SERVER_TYPE = 1,
  CONNECT_FAIL_FOUND_SAME_SERVER = 2,
  CONNECT_FAIL_AUTH_KEY_INVALID = 3
};
bool ConnectResult_IsValid(int value);
const ConnectResult ConnectResult_MIN = CONNECT_OK;
const ConnectResult ConnectResult_MAX = CONNECT_FAIL_AUTH_KEY_INVALID;
const int ConnectResult_ARRAYSIZE = ConnectResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* ConnectResult_descriptor();
inline const ::std::string& ConnectResult_Name(ConnectResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    ConnectResult_descriptor(), value);
}
inline bool ConnectResult_Parse(
    const ::std::string& name, ConnectResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConnectResult>(
    ConnectResult_descriptor(), name, value);
}
// ===================================================================

class ConnectReq : public ::google::protobuf::Message {
 public:
  ConnectReq();
  virtual ~ConnectReq();

  ConnectReq(const ConnectReq& from);

  inline ConnectReq& operator=(const ConnectReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectReq& default_instance();

  void Swap(ConnectReq* other);

  // implements Message ----------------------------------------------

  ConnectReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConnectReq& from);
  void MergeFrom(const ConnectReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 svrType = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrTypeFieldNumber = 1;
  inline ::google::protobuf::int32 svrtype() const;
  inline void set_svrtype(::google::protobuf::int32 value);

  // required string authKey = 2;
  inline bool has_authkey() const;
  inline void clear_authkey();
  static const int kAuthKeyFieldNumber = 2;
  inline const ::std::string& authkey() const;
  inline void set_authkey(const ::std::string& value);
  inline void set_authkey(const char* value);
  inline void set_authkey(const char* value, size_t size);
  inline ::std::string* mutable_authkey();
  inline ::std::string* release_authkey();
  inline void set_allocated_authkey(::std::string* authkey);

  // optional int32 svrId = 3;
  inline bool has_svrid() const;
  inline void clear_svrid();
  static const int kSvrIdFieldNumber = 3;
  inline ::google::protobuf::int32 svrid() const;
  inline void set_svrid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ConnectReq)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_authkey();
  inline void clear_has_authkey();
  inline void set_has_svrid();
  inline void clear_has_svrid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* authkey_;
  ::google::protobuf::int32 svrtype_;
  ::google::protobuf::int32 svrid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_net_2eproto();
  friend void protobuf_AssignDesc_net_2eproto();
  friend void protobuf_ShutdownFile_net_2eproto();

  void InitAsDefaultInstance();
  static ConnectReq* default_instance_;
};
// -------------------------------------------------------------------

class ConnectResponse : public ::google::protobuf::Message {
 public:
  ConnectResponse();
  virtual ~ConnectResponse();

  ConnectResponse(const ConnectResponse& from);

  inline ConnectResponse& operator=(const ConnectResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectResponse& default_instance();

  void Swap(ConnectResponse* other);

  // implements Message ----------------------------------------------

  ConnectResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConnectResponse& from);
  void MergeFrom(const ConnectResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ConnectResult ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::ConnectResult ret() const;
  inline void set_ret(::ConnectResult value);

  // required int32 svrType = 2;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrTypeFieldNumber = 2;
  inline ::google::protobuf::int32 svrtype() const;
  inline void set_svrtype(::google::protobuf::int32 value);

  // optional int32 svrId = 3;
  inline bool has_svrid() const;
  inline void clear_svrid();
  static const int kSvrIdFieldNumber = 3;
  inline ::google::protobuf::int32 svrid() const;
  inline void set_svrid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ConnectResponse)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_svrid();
  inline void clear_has_svrid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int ret_;
  ::google::protobuf::int32 svrtype_;
  ::google::protobuf::int32 svrid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_net_2eproto();
  friend void protobuf_AssignDesc_net_2eproto();
  friend void protobuf_ShutdownFile_net_2eproto();

  void InitAsDefaultInstance();
  static ConnectResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// ConnectReq

// required int32 svrType = 1;
inline bool ConnectReq::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConnectReq::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConnectReq::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConnectReq::clear_svrtype() {
  svrtype_ = 0;
  clear_has_svrtype();
}
inline ::google::protobuf::int32 ConnectReq::svrtype() const {
  return svrtype_;
}
inline void ConnectReq::set_svrtype(::google::protobuf::int32 value) {
  set_has_svrtype();
  svrtype_ = value;
}

// required string authKey = 2;
inline bool ConnectReq::has_authkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConnectReq::set_has_authkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConnectReq::clear_has_authkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConnectReq::clear_authkey() {
  if (authkey_ != &::google::protobuf::internal::kEmptyString) {
    authkey_->clear();
  }
  clear_has_authkey();
}
inline const ::std::string& ConnectReq::authkey() const {
  return *authkey_;
}
inline void ConnectReq::set_authkey(const ::std::string& value) {
  set_has_authkey();
  if (authkey_ == &::google::protobuf::internal::kEmptyString) {
    authkey_ = new ::std::string;
  }
  authkey_->assign(value);
}
inline void ConnectReq::set_authkey(const char* value) {
  set_has_authkey();
  if (authkey_ == &::google::protobuf::internal::kEmptyString) {
    authkey_ = new ::std::string;
  }
  authkey_->assign(value);
}
inline void ConnectReq::set_authkey(const char* value, size_t size) {
  set_has_authkey();
  if (authkey_ == &::google::protobuf::internal::kEmptyString) {
    authkey_ = new ::std::string;
  }
  authkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConnectReq::mutable_authkey() {
  set_has_authkey();
  if (authkey_ == &::google::protobuf::internal::kEmptyString) {
    authkey_ = new ::std::string;
  }
  return authkey_;
}
inline ::std::string* ConnectReq::release_authkey() {
  clear_has_authkey();
  if (authkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = authkey_;
    authkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ConnectReq::set_allocated_authkey(::std::string* authkey) {
  if (authkey_ != &::google::protobuf::internal::kEmptyString) {
    delete authkey_;
  }
  if (authkey) {
    set_has_authkey();
    authkey_ = authkey;
  } else {
    clear_has_authkey();
    authkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 svrId = 3;
inline bool ConnectReq::has_svrid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConnectReq::set_has_svrid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConnectReq::clear_has_svrid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConnectReq::clear_svrid() {
  svrid_ = 0;
  clear_has_svrid();
}
inline ::google::protobuf::int32 ConnectReq::svrid() const {
  return svrid_;
}
inline void ConnectReq::set_svrid(::google::protobuf::int32 value) {
  set_has_svrid();
  svrid_ = value;
}

// -------------------------------------------------------------------

// ConnectResponse

// required .ConnectResult ret = 1;
inline bool ConnectResponse::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConnectResponse::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConnectResponse::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConnectResponse::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::ConnectResult ConnectResponse::ret() const {
  return static_cast< ::ConnectResult >(ret_);
}
inline void ConnectResponse::set_ret(::ConnectResult value) {
  assert(::ConnectResult_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// required int32 svrType = 2;
inline bool ConnectResponse::has_svrtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConnectResponse::set_has_svrtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConnectResponse::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConnectResponse::clear_svrtype() {
  svrtype_ = 0;
  clear_has_svrtype();
}
inline ::google::protobuf::int32 ConnectResponse::svrtype() const {
  return svrtype_;
}
inline void ConnectResponse::set_svrtype(::google::protobuf::int32 value) {
  set_has_svrtype();
  svrtype_ = value;
}

// optional int32 svrId = 3;
inline bool ConnectResponse::has_svrid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConnectResponse::set_has_svrid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConnectResponse::clear_has_svrid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConnectResponse::clear_svrid() {
  svrid_ = 0;
  clear_has_svrid();
}
inline ::google::protobuf::int32 ConnectResponse::svrid() const {
  return svrid_;
}
inline void ConnectResponse::set_svrid(::google::protobuf::int32 value) {
  set_has_svrid();
  svrid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetMsgId>() {
  return ::NetMsgId_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ConnectResult>() {
  return ::ConnectResult_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2eproto__INCLUDED
