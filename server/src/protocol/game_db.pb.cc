// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_db.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game_db.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Msg {
namespace Protocol {

namespace {

const ::google::protobuf::Descriptor* SqlMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SqlMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PostSql_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PostSql_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GameToDBMsgId_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SqlType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SqlDBType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_game_5fdb_2eproto() {
  protobuf_AddDesc_game_5fdb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "game_db.proto");
  GOOGLE_CHECK(file != NULL);
  SqlMsg_descriptor_ = file->message_type(0);
  static const int SqlMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SqlMsg, sqltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SqlMsg, sqlid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SqlMsg, sql_),
  };
  SqlMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SqlMsg_descriptor_,
      SqlMsg::default_instance_,
      SqlMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SqlMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SqlMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SqlMsg));
  PostSql_descriptor_ = file->message_type(1);
  static const int PostSql_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostSql, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostSql, dbtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostSql, sqls_),
  };
  PostSql_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PostSql_descriptor_,
      PostSql::default_instance_,
      PostSql_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostSql, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostSql, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PostSql));
  GameToDBMsgId_descriptor_ = file->enum_type(0);
  SqlType_descriptor_ = file->enum_type(1);
  SqlDBType_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_game_5fdb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SqlMsg_descriptor_, &SqlMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PostSql_descriptor_, &PostSql::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_game_5fdb_2eproto() {
  delete SqlMsg::default_instance_;
  delete SqlMsg_reflection_;
  delete PostSql::default_instance_;
  delete PostSql_reflection_;
}

void protobuf_AddDesc_game_5fdb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rgame_db.proto\022\014Msg.Protocol\"W\n\006SqlMsg\022"
    "1\n\007sqltype\030\001 \002(\0162\025.Msg.Protocol.SqlType:"
    "\tNormalSql\022\r\n\005sqlid\030\002 \002(\006\022\013\n\003sql\030\003 \002(\t\"d"
    "\n\007PostSql\022\014\n\004time\030\001 \002(\007\022\'\n\006dbtype\030\002 \002(\0162"
    "\027.Msg.Protocol.SqlDBType\022\"\n\004sqls\030\003 \003(\0132\024"
    ".Msg.Protocol.SqlMsg*N\n\rGameToDBMsgId\022\026\n"
    "\021eGameToDBMsgIdMin\020\320\017\022\r\n\010ePostSql\020\321\017\022\026\n\021"
    "eGameToDBMsgIdMax\020\270\027*4\n\007SqlType\022\r\n\tNorma"
    "lSql\020\000\022\r\n\tPlayerSql\020\001\022\013\n\007GuidSql\020\002*\"\n\tSq"
    "lDBType\022\n\n\006GameDB\020\000\022\t\n\005LogDB\020\001", 390);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game_db.proto", &protobuf_RegisterTypes);
  SqlMsg::default_instance_ = new SqlMsg();
  PostSql::default_instance_ = new PostSql();
  SqlMsg::default_instance_->InitAsDefaultInstance();
  PostSql::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_game_5fdb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_game_5fdb_2eproto {
  StaticDescriptorInitializer_game_5fdb_2eproto() {
    protobuf_AddDesc_game_5fdb_2eproto();
  }
} static_descriptor_initializer_game_5fdb_2eproto_;
const ::google::protobuf::EnumDescriptor* GameToDBMsgId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameToDBMsgId_descriptor_;
}
bool GameToDBMsgId_IsValid(int value) {
  switch(value) {
    case 2000:
    case 2001:
    case 3000:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SqlType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SqlType_descriptor_;
}
bool SqlType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SqlDBType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SqlDBType_descriptor_;
}
bool SqlDBType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int SqlMsg::kSqltypeFieldNumber;
const int SqlMsg::kSqlidFieldNumber;
const int SqlMsg::kSqlFieldNumber;
#endif  // !_MSC_VER

SqlMsg::SqlMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SqlMsg::InitAsDefaultInstance() {
}

SqlMsg::SqlMsg(const SqlMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SqlMsg::SharedCtor() {
  _cached_size_ = 0;
  sqltype_ = 0;
  sqlid_ = GOOGLE_ULONGLONG(0);
  sql_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SqlMsg::~SqlMsg() {
  SharedDtor();
}

void SqlMsg::SharedDtor() {
  if (sql_ != &::google::protobuf::internal::kEmptyString) {
    delete sql_;
  }
  if (this != default_instance_) {
  }
}

void SqlMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SqlMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SqlMsg_descriptor_;
}

const SqlMsg& SqlMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdb_2eproto();
  return *default_instance_;
}

SqlMsg* SqlMsg::default_instance_ = NULL;

SqlMsg* SqlMsg::New() const {
  return new SqlMsg;
}

void SqlMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sqltype_ = 0;
    sqlid_ = GOOGLE_ULONGLONG(0);
    if (has_sql()) {
      if (sql_ != &::google::protobuf::internal::kEmptyString) {
        sql_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SqlMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Msg.Protocol.SqlType sqltype = 1 [default = NormalSql];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Msg::Protocol::SqlType_IsValid(value)) {
            set_sqltype(static_cast< ::Msg::Protocol::SqlType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_sqlid;
        break;
      }

      // required fixed64 sqlid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sqlid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sqlid_)));
          set_has_sqlid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sql;
        break;
      }

      // required string sql = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sql:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sql()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sql().data(), this->sql().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SqlMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Msg.Protocol.SqlType sqltype = 1 [default = NormalSql];
  if (has_sqltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->sqltype(), output);
  }

  // required fixed64 sqlid = 2;
  if (has_sqlid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->sqlid(), output);
  }

  // required string sql = 3;
  if (has_sql()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sql().data(), this->sql().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sql(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SqlMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Msg.Protocol.SqlType sqltype = 1 [default = NormalSql];
  if (has_sqltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->sqltype(), target);
  }

  // required fixed64 sqlid = 2;
  if (has_sqlid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->sqlid(), target);
  }

  // required string sql = 3;
  if (has_sql()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sql().data(), this->sql().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sql(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SqlMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Msg.Protocol.SqlType sqltype = 1 [default = NormalSql];
    if (has_sqltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sqltype());
    }

    // required fixed64 sqlid = 2;
    if (has_sqlid()) {
      total_size += 1 + 8;
    }

    // required string sql = 3;
    if (has_sql()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sql());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SqlMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SqlMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SqlMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SqlMsg::MergeFrom(const SqlMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sqltype()) {
      set_sqltype(from.sqltype());
    }
    if (from.has_sqlid()) {
      set_sqlid(from.sqlid());
    }
    if (from.has_sql()) {
      set_sql(from.sql());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SqlMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SqlMsg::CopyFrom(const SqlMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SqlMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SqlMsg::Swap(SqlMsg* other) {
  if (other != this) {
    std::swap(sqltype_, other->sqltype_);
    std::swap(sqlid_, other->sqlid_);
    std::swap(sql_, other->sql_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SqlMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SqlMsg_descriptor_;
  metadata.reflection = SqlMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PostSql::kTimeFieldNumber;
const int PostSql::kDbtypeFieldNumber;
const int PostSql::kSqlsFieldNumber;
#endif  // !_MSC_VER

PostSql::PostSql()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PostSql::InitAsDefaultInstance() {
}

PostSql::PostSql(const PostSql& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PostSql::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  dbtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PostSql::~PostSql() {
  SharedDtor();
}

void PostSql::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PostSql::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PostSql::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PostSql_descriptor_;
}

const PostSql& PostSql::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdb_2eproto();
  return *default_instance_;
}

PostSql* PostSql::default_instance_ = NULL;

PostSql* PostSql::New() const {
  return new PostSql;
}

void PostSql::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
    dbtype_ = 0;
  }
  sqls_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PostSql::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dbtype;
        break;
      }

      // required .Msg.Protocol.SqlDBType dbtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dbtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Msg::Protocol::SqlDBType_IsValid(value)) {
            set_dbtype(static_cast< ::Msg::Protocol::SqlDBType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sqls;
        break;
      }

      // repeated .Msg.Protocol.SqlMsg sqls = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sqls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sqls()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sqls;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PostSql::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->time(), output);
  }

  // required .Msg.Protocol.SqlDBType dbtype = 2;
  if (has_dbtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->dbtype(), output);
  }

  // repeated .Msg.Protocol.SqlMsg sqls = 3;
  for (int i = 0; i < this->sqls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sqls(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PostSql::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->time(), target);
  }

  // required .Msg.Protocol.SqlDBType dbtype = 2;
  if (has_dbtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->dbtype(), target);
  }

  // repeated .Msg.Protocol.SqlMsg sqls = 3;
  for (int i = 0; i < this->sqls_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sqls(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PostSql::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 time = 1;
    if (has_time()) {
      total_size += 1 + 4;
    }

    // required .Msg.Protocol.SqlDBType dbtype = 2;
    if (has_dbtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dbtype());
    }

  }
  // repeated .Msg.Protocol.SqlMsg sqls = 3;
  total_size += 1 * this->sqls_size();
  for (int i = 0; i < this->sqls_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sqls(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PostSql::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PostSql* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PostSql*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PostSql::MergeFrom(const PostSql& from) {
  GOOGLE_CHECK_NE(&from, this);
  sqls_.MergeFrom(from.sqls_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_dbtype()) {
      set_dbtype(from.dbtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PostSql::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostSql::CopyFrom(const PostSql& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostSql::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < sqls_size(); i++) {
    if (!this->sqls(i).IsInitialized()) return false;
  }
  return true;
}

void PostSql::Swap(PostSql* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(dbtype_, other->dbtype_);
    sqls_.Swap(&other->sqls_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PostSql::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PostSql_descriptor_;
  metadata.reflection = PostSql_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol
}  // namespace Msg

// @@protoc_insertion_point(global_scope)
