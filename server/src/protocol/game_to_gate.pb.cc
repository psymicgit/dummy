// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_to_gate.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game_to_gate.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* RouteFromClientMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RouteFromClientMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* RouteToClientMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RouteToClientMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* RouteLoginRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RouteLoginRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GateToGameMsgId_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GameToGateMsgId_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_game_5fto_5fgate_2eproto() {
  protobuf_AddDesc_game_5fto_5fgate_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "game_to_gate.proto");
  GOOGLE_CHECK(file != NULL);
  RouteFromClientMsg_descriptor_ = file->message_type(0);
  static const int RouteFromClientMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteFromClientMsg, client_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteFromClientMsg, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteFromClientMsg, msg_),
  };
  RouteFromClientMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RouteFromClientMsg_descriptor_,
      RouteFromClientMsg::default_instance_,
      RouteFromClientMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteFromClientMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteFromClientMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RouteFromClientMsg));
  RouteToClientMsg_descriptor_ = file->message_type(1);
  static const int RouteToClientMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteToClientMsg, client_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteToClientMsg, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteToClientMsg, msg_),
  };
  RouteToClientMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RouteToClientMsg_descriptor_,
      RouteToClientMsg::default_instance_,
      RouteToClientMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteToClientMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteToClientMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RouteToClientMsg));
  RouteLoginRequest_descriptor_ = file->message_type(2);
  static const int RouteLoginRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteLoginRequest, client_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteLoginRequest, loginreq_),
  };
  RouteLoginRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RouteLoginRequest_descriptor_,
      RouteLoginRequest::default_instance_,
      RouteLoginRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteLoginRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteLoginRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RouteLoginRequest));
  GateToGameMsgId_descriptor_ = file->enum_type(0);
  GameToGateMsgId_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_game_5fto_5fgate_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RouteFromClientMsg_descriptor_, &RouteFromClientMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RouteToClientMsg_descriptor_, &RouteToClientMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RouteLoginRequest_descriptor_, &RouteLoginRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_game_5fto_5fgate_2eproto() {
  delete RouteFromClientMsg::default_instance_;
  delete RouteFromClientMsg_reflection_;
  delete RouteToClientMsg::default_instance_;
  delete RouteToClientMsg_reflection_;
  delete RouteLoginRequest::default_instance_;
  delete RouteLoginRequest_reflection_;
}

void protobuf_AddDesc_game_5fto_5fgate_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_client_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022game_to_gate.proto\032\014client.proto\"D\n\022Ro"
    "uteFromClientMsg\022\021\n\tclient_id\030\001 \002(\005\022\016\n\006m"
    "sg_id\030\002 \002(\005\022\013\n\003msg\030\003 \002(\t\"B\n\020RouteToClien"
    "tMsg\022\021\n\tclient_id\030\001 \002(\005\022\016\n\006msg_id\030\002 \002(\005\022"
    "\013\n\003msg\030\003 \002(\t\"C\n\021RouteLoginRequest\022\021\n\tcli"
    "ent_id\030\001 \002(\005\022\033\n\010loginReq\030\002 \002(\0132\t.LoginRe"
    "q*S\n\017GateToGameMsgId\022\036\n\032GateToGame_Route"
    "FromClient\020\001\022 \n\034GateToGame_RouteLoginReq"
    "uest\020\002*/\n\017GameToGateMsgId\022\034\n\030GameToGate_"
    "RouteToClient\020\001", 375);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game_to_gate.proto", &protobuf_RegisterTypes);
  RouteFromClientMsg::default_instance_ = new RouteFromClientMsg();
  RouteToClientMsg::default_instance_ = new RouteToClientMsg();
  RouteLoginRequest::default_instance_ = new RouteLoginRequest();
  RouteFromClientMsg::default_instance_->InitAsDefaultInstance();
  RouteToClientMsg::default_instance_->InitAsDefaultInstance();
  RouteLoginRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_game_5fto_5fgate_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_game_5fto_5fgate_2eproto {
  StaticDescriptorInitializer_game_5fto_5fgate_2eproto() {
    protobuf_AddDesc_game_5fto_5fgate_2eproto();
  }
} static_descriptor_initializer_game_5fto_5fgate_2eproto_;
const ::google::protobuf::EnumDescriptor* GateToGameMsgId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateToGameMsgId_descriptor_;
}
bool GateToGameMsgId_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GameToGateMsgId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameToGateMsgId_descriptor_;
}
bool GameToGateMsgId_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int RouteFromClientMsg::kClientIdFieldNumber;
const int RouteFromClientMsg::kMsgIdFieldNumber;
const int RouteFromClientMsg::kMsgFieldNumber;
#endif  // !_MSC_VER

RouteFromClientMsg::RouteFromClientMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RouteFromClientMsg::InitAsDefaultInstance() {
}

RouteFromClientMsg::RouteFromClientMsg(const RouteFromClientMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RouteFromClientMsg::SharedCtor() {
  _cached_size_ = 0;
  client_id_ = 0;
  msg_id_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RouteFromClientMsg::~RouteFromClientMsg() {
  SharedDtor();
}

void RouteFromClientMsg::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void RouteFromClientMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouteFromClientMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RouteFromClientMsg_descriptor_;
}

const RouteFromClientMsg& RouteFromClientMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fto_5fgate_2eproto();
  return *default_instance_;
}

RouteFromClientMsg* RouteFromClientMsg::default_instance_ = NULL;

RouteFromClientMsg* RouteFromClientMsg::New() const {
  return new RouteFromClientMsg;
}

void RouteFromClientMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_id_ = 0;
    msg_id_ = 0;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RouteFromClientMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_id_)));
          set_has_client_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_msg_id;
        break;
      }

      // required int32 msg_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg;
        break;
      }

      // required string msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RouteFromClientMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_id = 1;
  if (has_client_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_id(), output);
  }

  // required int32 msg_id = 2;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->msg_id(), output);
  }

  // required string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RouteFromClientMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 client_id = 1;
  if (has_client_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_id(), target);
  }

  // required int32 msg_id = 2;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->msg_id(), target);
  }

  // required string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RouteFromClientMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_id = 1;
    if (has_client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_id());
    }

    // required int32 msg_id = 2;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msg_id());
    }

    // required string msg = 3;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouteFromClientMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RouteFromClientMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RouteFromClientMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RouteFromClientMsg::MergeFrom(const RouteFromClientMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_id()) {
      set_client_id(from.client_id());
    }
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RouteFromClientMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteFromClientMsg::CopyFrom(const RouteFromClientMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteFromClientMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RouteFromClientMsg::Swap(RouteFromClientMsg* other) {
  if (other != this) {
    std::swap(client_id_, other->client_id_);
    std::swap(msg_id_, other->msg_id_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RouteFromClientMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RouteFromClientMsg_descriptor_;
  metadata.reflection = RouteFromClientMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RouteToClientMsg::kClientIdFieldNumber;
const int RouteToClientMsg::kMsgIdFieldNumber;
const int RouteToClientMsg::kMsgFieldNumber;
#endif  // !_MSC_VER

RouteToClientMsg::RouteToClientMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RouteToClientMsg::InitAsDefaultInstance() {
}

RouteToClientMsg::RouteToClientMsg(const RouteToClientMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RouteToClientMsg::SharedCtor() {
  _cached_size_ = 0;
  client_id_ = 0;
  msg_id_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RouteToClientMsg::~RouteToClientMsg() {
  SharedDtor();
}

void RouteToClientMsg::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void RouteToClientMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouteToClientMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RouteToClientMsg_descriptor_;
}

const RouteToClientMsg& RouteToClientMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fto_5fgate_2eproto();
  return *default_instance_;
}

RouteToClientMsg* RouteToClientMsg::default_instance_ = NULL;

RouteToClientMsg* RouteToClientMsg::New() const {
  return new RouteToClientMsg;
}

void RouteToClientMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_id_ = 0;
    msg_id_ = 0;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RouteToClientMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_id_)));
          set_has_client_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_msg_id;
        break;
      }

      // required int32 msg_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg;
        break;
      }

      // required string msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RouteToClientMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_id = 1;
  if (has_client_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_id(), output);
  }

  // required int32 msg_id = 2;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->msg_id(), output);
  }

  // required string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RouteToClientMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 client_id = 1;
  if (has_client_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_id(), target);
  }

  // required int32 msg_id = 2;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->msg_id(), target);
  }

  // required string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RouteToClientMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_id = 1;
    if (has_client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_id());
    }

    // required int32 msg_id = 2;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msg_id());
    }

    // required string msg = 3;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouteToClientMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RouteToClientMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RouteToClientMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RouteToClientMsg::MergeFrom(const RouteToClientMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_id()) {
      set_client_id(from.client_id());
    }
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RouteToClientMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteToClientMsg::CopyFrom(const RouteToClientMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteToClientMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RouteToClientMsg::Swap(RouteToClientMsg* other) {
  if (other != this) {
    std::swap(client_id_, other->client_id_);
    std::swap(msg_id_, other->msg_id_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RouteToClientMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RouteToClientMsg_descriptor_;
  metadata.reflection = RouteToClientMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RouteLoginRequest::kClientIdFieldNumber;
const int RouteLoginRequest::kLoginReqFieldNumber;
#endif  // !_MSC_VER

RouteLoginRequest::RouteLoginRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RouteLoginRequest::InitAsDefaultInstance() {
  loginreq_ = const_cast< ::LoginReq*>(&::LoginReq::default_instance());
}

RouteLoginRequest::RouteLoginRequest(const RouteLoginRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RouteLoginRequest::SharedCtor() {
  _cached_size_ = 0;
  client_id_ = 0;
  loginreq_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RouteLoginRequest::~RouteLoginRequest() {
  SharedDtor();
}

void RouteLoginRequest::SharedDtor() {
  if (this != default_instance_) {
    delete loginreq_;
  }
}

void RouteLoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouteLoginRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RouteLoginRequest_descriptor_;
}

const RouteLoginRequest& RouteLoginRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fto_5fgate_2eproto();
  return *default_instance_;
}

RouteLoginRequest* RouteLoginRequest::default_instance_ = NULL;

RouteLoginRequest* RouteLoginRequest::New() const {
  return new RouteLoginRequest;
}

void RouteLoginRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_id_ = 0;
    if (has_loginreq()) {
      if (loginreq_ != NULL) loginreq_->::LoginReq::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RouteLoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_id_)));
          set_has_client_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_loginReq;
        break;
      }

      // required .LoginReq loginReq = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loginReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loginreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RouteLoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_id = 1;
  if (has_client_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_id(), output);
  }

  // required .LoginReq loginReq = 2;
  if (has_loginreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->loginreq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RouteLoginRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 client_id = 1;
  if (has_client_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_id(), target);
  }

  // required .LoginReq loginReq = 2;
  if (has_loginreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->loginreq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RouteLoginRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_id = 1;
    if (has_client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_id());
    }

    // required .LoginReq loginReq = 2;
    if (has_loginreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loginreq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouteLoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RouteLoginRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RouteLoginRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RouteLoginRequest::MergeFrom(const RouteLoginRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_id()) {
      set_client_id(from.client_id());
    }
    if (from.has_loginreq()) {
      mutable_loginreq()->::LoginReq::MergeFrom(from.loginreq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RouteLoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteLoginRequest::CopyFrom(const RouteLoginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteLoginRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_loginreq()) {
    if (!this->loginreq().IsInitialized()) return false;
  }
  return true;
}

void RouteLoginRequest::Swap(RouteLoginRequest* other) {
  if (other != this) {
    std::swap(client_id_, other->client_id_);
    std::swap(loginreq_, other->loginreq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RouteLoginRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RouteLoginRequest_descriptor_;
  metadata.reflection = RouteLoginRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
