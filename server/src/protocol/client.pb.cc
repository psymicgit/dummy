// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Msg {
namespace Protocol {

namespace {

const ::google::protobuf::Descriptor* LoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginReq_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LoginReq_LoginType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LoginReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LoginReply_LoginType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* EncryptKeyNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EncryptKeyNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PingPong_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PingPong_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddObjNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddObjNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveObjNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveObjNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ClientMsgId_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ServerMsgId_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EncryptKeyDef_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AuthResult_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2eproto() {
  protobuf_AddDesc_client_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.proto");
  GOOGLE_CHECK(file != NULL);
  LoginReq_descriptor_ = file->message_type(0);
  static const int LoginReq_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, clientversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, notifyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, logintype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, authtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, authkey_),
  };
  LoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginReq_descriptor_,
      LoginReq::default_instance_,
      LoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginReq));
  LoginReq_LoginType_descriptor_ = LoginReq_descriptor_->enum_type(0);
  LoginReply_descriptor_ = file->message_type(1);
  static const int LoginReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReply, userid_),
  };
  LoginReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginReply_descriptor_,
      LoginReply::default_instance_,
      LoginReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginReply));
  LoginReply_LoginType_descriptor_ = LoginReply_descriptor_->enum_type(0);
  EncryptKeyNtf_descriptor_ = file->message_type(2);
  static const int EncryptKeyNtf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptKeyNtf, publickey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptKeyNtf, privatekey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptKeyNtf, authkey_),
  };
  EncryptKeyNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EncryptKeyNtf_descriptor_,
      EncryptKeyNtf::default_instance_,
      EncryptKeyNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptKeyNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptKeyNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EncryptKeyNtf));
  AuthReq_descriptor_ = file->message_type(3);
  static const int AuthReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthReq, authkey_),
  };
  AuthReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthReq_descriptor_,
      AuthReq::default_instance_,
      AuthReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthReq));
  AuthAck_descriptor_ = file->message_type(4);
  static const int AuthAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthAck, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthAck, encryptkey_),
  };
  AuthAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthAck_descriptor_,
      AuthAck::default_instance_,
      AuthAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthAck));
  PingPong_descriptor_ = file->message_type(5);
  static const int PingPong_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingPong, pingpong_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingPong, time_),
  };
  PingPong_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PingPong_descriptor_,
      PingPong::default_instance_,
      PingPong_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingPong, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingPong, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PingPong));
  ReadyRequest_descriptor_ = file->message_type(6);
  static const int ReadyRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyRequest, is_ready_),
  };
  ReadyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadyRequest_descriptor_,
      ReadyRequest::default_instance_,
      ReadyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadyRequest));
  MoveRequest_descriptor_ = file->message_type(7);
  static const int MoveRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveRequest, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveRequest, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveRequest, z_),
  };
  MoveRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveRequest_descriptor_,
      MoveRequest::default_instance_,
      MoveRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveRequest));
  MoveNotify_descriptor_ = file->message_type(8);
  static const int MoveNotify_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveNotify, obj_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveNotify, from_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveNotify, from_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveNotify, from_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveNotify, to_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveNotify, to_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveNotify, to_z_),
  };
  MoveNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveNotify_descriptor_,
      MoveNotify::default_instance_,
      MoveNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveNotify));
  AddObjNotify_descriptor_ = file->message_type(9);
  static const int AddObjNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddObjNotify, obj_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddObjNotify, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddObjNotify, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddObjNotify, z_),
  };
  AddObjNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddObjNotify_descriptor_,
      AddObjNotify::default_instance_,
      AddObjNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddObjNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddObjNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddObjNotify));
  RemoveObjNotify_descriptor_ = file->message_type(10);
  static const int RemoveObjNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveObjNotify, obj_id_),
  };
  RemoveObjNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveObjNotify_descriptor_,
      RemoveObjNotify::default_instance_,
      RemoveObjNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveObjNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveObjNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveObjNotify));
  ClientMsgId_descriptor_ = file->enum_type(0);
  ServerMsgId_descriptor_ = file->enum_type(1);
  EncryptKeyDef_descriptor_ = file->enum_type(2);
  AuthResult_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginReq_descriptor_, &LoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginReply_descriptor_, &LoginReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EncryptKeyNtf_descriptor_, &EncryptKeyNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthReq_descriptor_, &AuthReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthAck_descriptor_, &AuthAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PingPong_descriptor_, &PingPong::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadyRequest_descriptor_, &ReadyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveRequest_descriptor_, &MoveRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveNotify_descriptor_, &MoveNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddObjNotify_descriptor_, &AddObjNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveObjNotify_descriptor_, &RemoveObjNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2eproto() {
  delete LoginReq::default_instance_;
  delete LoginReq_reflection_;
  delete LoginReply::default_instance_;
  delete LoginReply_reflection_;
  delete EncryptKeyNtf::default_instance_;
  delete EncryptKeyNtf_reflection_;
  delete AuthReq::default_instance_;
  delete AuthReq_reflection_;
  delete AuthAck::default_instance_;
  delete AuthAck_reflection_;
  delete PingPong::default_instance_;
  delete PingPong_reflection_;
  delete ReadyRequest::default_instance_;
  delete ReadyRequest_reflection_;
  delete MoveRequest::default_instance_;
  delete MoveRequest_reflection_;
  delete MoveNotify::default_instance_;
  delete MoveNotify_reflection_;
  delete AddObjNotify::default_instance_;
  delete AddObjNotify_reflection_;
  delete RemoveObjNotify::default_instance_;
  delete RemoveObjNotify_reflection_;
}

void protobuf_AddDesc_client_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014client.proto\022\014Msg.Protocol\"\225\002\n\010LoginRe"
    "q\022\025\n\rclientVersion\030\001 \002(\005\022\020\n\010deviceid\030\002 \002"
    "(\t\022\020\n\010notifyid\030\003 \002(\t\022\020\n\010username\030\004 \002(\t\022\016"
    "\n\006zoneid\030\005 \002(\005\022\016\n\006userid\030\006 \002(\005\022\020\n\010player"
    "id\030\007 \002(\005\022\013\n\003job\030\010 \002(\t\0223\n\tloginType\030\t \002(\016"
    "2 .Msg.Protocol.LoginReq.LoginType\022\020\n\010au"
    "thType\030\n \002(\005\022\017\n\007authKey\030\013 \002(\t\"%\n\tLoginTy"
    "pe\022\013\n\007NewRole\020\000\022\013\n\007OldRole\020\001\"C\n\nLoginRep"
    "ly\022\016\n\006userid\030\006 \002(\005\"%\n\tLoginType\022\013\n\007NewRo"
    "le\020\000\022\013\n\007OldRole\020\001\"G\n\rEncryptKeyNtf\022\021\n\tpu"
    "blicKey\030\001 \002(\t\022\022\n\nprivateKey\030\002 \002(\t\022\017\n\007aut"
    "hKey\030\003 \002(\t\"\032\n\007AuthReq\022\017\n\007authKey\030\001 \002(\t\"G"
    "\n\007AuthAck\022(\n\006result\030\001 \002(\0162\030.Msg.Protocol"
    ".AuthResult\022\022\n\nencryptKey\030\002 \002(\t\"*\n\010PingP"
    "ong\022\020\n\010pingpong\030\001 \002(\t\022\014\n\004time\030\002 \002(\004\" \n\014R"
    "eadyRequest\022\020\n\010is_ready\030\001 \002(\005\".\n\013MoveReq"
    "uest\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\t\n\001z\030\003 \002(\002\"v\n"
    "\nMoveNotify\022\016\n\006obj_id\030\001 \002(\003\022\016\n\006from_x\030\002 "
    "\002(\002\022\016\n\006from_y\030\003 \002(\002\022\016\n\006from_z\030\004 \002(\002\022\014\n\004t"
    "o_x\030\005 \002(\002\022\014\n\004to_y\030\006 \002(\002\022\014\n\004to_z\030\007 \002(\002\"\?\n"
    "\014AddObjNotify\022\016\n\006obj_id\030\001 \002(\003\022\t\n\001x\030\002 \002(\002"
    "\022\t\n\001y\030\003 \002(\002\022\t\n\001z\030\004 \002(\002\"!\n\017RemoveObjNotif"
    "y\022\016\n\006obj_id\030\001 \002(\003*\366\001\n\013ClientMsgId\022\032\n\026Cli"
    "entMsg_LoginRequest\020\001\022\031\n\025ClientMsg_AuthR"
    "equest\020\002\022\031\n\025ClientMsg_PingRequest\020\003\022\036\n\032C"
    "lientMsg_SpeedTestRequest\020\004\022 \n\034ClientMsg"
    "_LatencyTestRequest\020\005\022\032\n\025ClientMsg_Route"
    "ToGate\020\350\007\022\033\n\026ClientMsg_ReadyRequest\020\351\007\022\032"
    "\n\025ClientMsg_MoveRequest\020\352\007*\203\002\n\013ServerMsg"
    "Id\022\030\n\024ServerMsg_LoginReply\020\001\022\036\n\032ServerMs"
    "g_EncryptKeyNotify\020\002\022\027\n\023ServerMsg_AutyRe"
    "ply\020\003\022\027\n\023ServerMsg_PongReply\020\004\022\034\n\030Server"
    "Msg_SpeedTestReply\020\005\022\036\n\032ServerMsg_Latenc"
    "yTestReply\020\006\022\031\n\024ServerMsg_MoveNotify\020\351\007\022"
    "\025\n\020ServerMsg_AddObj\020\352\007\022\030\n\023ServerMsg_Remo"
    "veObj\020\353\007*\177\n\rEncryptKeyDef\022\021\n\rEncryptKeyL"
    "en\020 \022\022\n\016EncryptHeadLen\020\002\022\022\n\016EncryptTailL"
    "en\020\004\022\016\n\nAuthKeyLen\020\020\022\020\n\014PublicKeyLen\020\010\022\021"
    "\n\rPrivateKeyLen\020\024*(\n\nAuthResult\022\013\n\007AUTH_"
    "OK\020\000\022\r\n\tAUTH_FAIL\020\001", 1579);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.proto", &protobuf_RegisterTypes);
  LoginReq::default_instance_ = new LoginReq();
  LoginReply::default_instance_ = new LoginReply();
  EncryptKeyNtf::default_instance_ = new EncryptKeyNtf();
  AuthReq::default_instance_ = new AuthReq();
  AuthAck::default_instance_ = new AuthAck();
  PingPong::default_instance_ = new PingPong();
  ReadyRequest::default_instance_ = new ReadyRequest();
  MoveRequest::default_instance_ = new MoveRequest();
  MoveNotify::default_instance_ = new MoveNotify();
  AddObjNotify::default_instance_ = new AddObjNotify();
  RemoveObjNotify::default_instance_ = new RemoveObjNotify();
  LoginReq::default_instance_->InitAsDefaultInstance();
  LoginReply::default_instance_->InitAsDefaultInstance();
  EncryptKeyNtf::default_instance_->InitAsDefaultInstance();
  AuthReq::default_instance_->InitAsDefaultInstance();
  AuthAck::default_instance_->InitAsDefaultInstance();
  PingPong::default_instance_->InitAsDefaultInstance();
  ReadyRequest::default_instance_->InitAsDefaultInstance();
  MoveRequest::default_instance_->InitAsDefaultInstance();
  MoveNotify::default_instance_->InitAsDefaultInstance();
  AddObjNotify::default_instance_->InitAsDefaultInstance();
  RemoveObjNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2eproto {
  StaticDescriptorInitializer_client_2eproto() {
    protobuf_AddDesc_client_2eproto();
  }
} static_descriptor_initializer_client_2eproto_;
const ::google::protobuf::EnumDescriptor* ClientMsgId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientMsgId_descriptor_;
}
bool ClientMsgId_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 1000:
    case 1001:
    case 1002:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ServerMsgId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerMsgId_descriptor_;
}
bool ServerMsgId_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 1001:
    case 1002:
    case 1003:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EncryptKeyDef_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EncryptKeyDef_descriptor_;
}
bool EncryptKeyDef_IsValid(int value) {
  switch(value) {
    case 2:
    case 4:
    case 8:
    case 16:
    case 20:
    case 32:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AuthResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthResult_descriptor_;
}
bool AuthResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LoginReq_LoginType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginReq_LoginType_descriptor_;
}
bool LoginReq_LoginType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LoginReq_LoginType LoginReq::NewRole;
const LoginReq_LoginType LoginReq::OldRole;
const LoginReq_LoginType LoginReq::LoginType_MIN;
const LoginReq_LoginType LoginReq::LoginType_MAX;
const int LoginReq::LoginType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LoginReq::kClientVersionFieldNumber;
const int LoginReq::kDeviceidFieldNumber;
const int LoginReq::kNotifyidFieldNumber;
const int LoginReq::kUsernameFieldNumber;
const int LoginReq::kZoneidFieldNumber;
const int LoginReq::kUseridFieldNumber;
const int LoginReq::kPlayeridFieldNumber;
const int LoginReq::kJobFieldNumber;
const int LoginReq::kLoginTypeFieldNumber;
const int LoginReq::kAuthTypeFieldNumber;
const int LoginReq::kAuthKeyFieldNumber;
#endif  // !_MSC_VER

LoginReq::LoginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginReq::InitAsDefaultInstance() {
}

LoginReq::LoginReq(const LoginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginReq::SharedCtor() {
  _cached_size_ = 0;
  clientversion_ = 0;
  deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  notifyid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zoneid_ = 0;
  userid_ = 0;
  playerid_ = 0;
  job_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  logintype_ = 0;
  authtype_ = 0;
  authkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginReq::~LoginReq() {
  SharedDtor();
}

void LoginReq::SharedDtor() {
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceid_;
  }
  if (notifyid_ != &::google::protobuf::internal::kEmptyString) {
    delete notifyid_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (job_ != &::google::protobuf::internal::kEmptyString) {
    delete job_;
  }
  if (authkey_ != &::google::protobuf::internal::kEmptyString) {
    delete authkey_;
  }
  if (this != default_instance_) {
  }
}

void LoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginReq_descriptor_;
}

const LoginReq& LoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();
  return *default_instance_;
}

LoginReq* LoginReq::default_instance_ = NULL;

LoginReq* LoginReq::New() const {
  return new LoginReq;
}

void LoginReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clientversion_ = 0;
    if (has_deviceid()) {
      if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
        deviceid_->clear();
      }
    }
    if (has_notifyid()) {
      if (notifyid_ != &::google::protobuf::internal::kEmptyString) {
        notifyid_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    zoneid_ = 0;
    userid_ = 0;
    playerid_ = 0;
    if (has_job()) {
      if (job_ != &::google::protobuf::internal::kEmptyString) {
        job_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    logintype_ = 0;
    authtype_ = 0;
    if (has_authkey()) {
      if (authkey_ != &::google::protobuf::internal::kEmptyString) {
        authkey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 clientVersion = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientversion_)));
          set_has_clientversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_deviceid;
        break;
      }

      // required string deviceid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_notifyid;
        break;
      }

      // required string notifyid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notifyid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notifyid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notifyid().data(), this->notifyid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_username;
        break;
      }

      // required string username = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_zoneid;
        break;
      }

      // required int32 zoneid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_userid;
        break;
      }

      // required int32 userid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_playerid;
        break;
      }

      // required int32 playerid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_job;
        break;
      }

      // required string job = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_job:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_job()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->job().data(), this->job().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_loginType;
        break;
      }

      // required .Msg.Protocol.LoginReq.LoginType loginType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Msg::Protocol::LoginReq_LoginType_IsValid(value)) {
            set_logintype(static_cast< ::Msg::Protocol::LoginReq_LoginType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_authType;
        break;
      }

      // required int32 authType = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_authType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &authtype_)));
          set_has_authtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_authKey;
        break;
      }

      // required string authKey = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_authKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->authkey().data(), this->authkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 clientVersion = 1;
  if (has_clientversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->clientversion(), output);
  }

  // required string deviceid = 2;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->deviceid(), output);
  }

  // required string notifyid = 3;
  if (has_notifyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notifyid().data(), this->notifyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->notifyid(), output);
  }

  // required string username = 4;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->username(), output);
  }

  // required int32 zoneid = 5;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->zoneid(), output);
  }

  // required int32 userid = 6;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->userid(), output);
  }

  // required int32 playerid = 7;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->playerid(), output);
  }

  // required string job = 8;
  if (has_job()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->job().data(), this->job().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->job(), output);
  }

  // required .Msg.Protocol.LoginReq.LoginType loginType = 9;
  if (has_logintype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->logintype(), output);
  }

  // required int32 authType = 10;
  if (has_authtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->authtype(), output);
  }

  // required string authKey = 11;
  if (has_authkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authkey().data(), this->authkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->authkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 clientVersion = 1;
  if (has_clientversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->clientversion(), target);
  }

  // required string deviceid = 2;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->deviceid(), target);
  }

  // required string notifyid = 3;
  if (has_notifyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notifyid().data(), this->notifyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->notifyid(), target);
  }

  // required string username = 4;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->username(), target);
  }

  // required int32 zoneid = 5;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->zoneid(), target);
  }

  // required int32 userid = 6;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->userid(), target);
  }

  // required int32 playerid = 7;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->playerid(), target);
  }

  // required string job = 8;
  if (has_job()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->job().data(), this->job().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->job(), target);
  }

  // required .Msg.Protocol.LoginReq.LoginType loginType = 9;
  if (has_logintype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->logintype(), target);
  }

  // required int32 authType = 10;
  if (has_authtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->authtype(), target);
  }

  // required string authKey = 11;
  if (has_authkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authkey().data(), this->authkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->authkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 clientVersion = 1;
    if (has_clientversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clientversion());
    }

    // required string deviceid = 2;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceid());
    }

    // required string notifyid = 3;
    if (has_notifyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notifyid());
    }

    // required string username = 4;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // required int32 zoneid = 5;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zoneid());
    }

    // required int32 userid = 6;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // required int32 playerid = 7;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

    // required string job = 8;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->job());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .Msg.Protocol.LoginReq.LoginType loginType = 9;
    if (has_logintype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->logintype());
    }

    // required int32 authType = 10;
    if (has_authtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->authtype());
    }

    // required string authKey = 11;
    if (has_authkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginReq::MergeFrom(const LoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientversion()) {
      set_clientversion(from.clientversion());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_notifyid()) {
      set_notifyid(from.notifyid());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_logintype()) {
      set_logintype(from.logintype());
    }
    if (from.has_authtype()) {
      set_authtype(from.authtype());
    }
    if (from.has_authkey()) {
      set_authkey(from.authkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginReq::CopyFrom(const LoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  return true;
}

void LoginReq::Swap(LoginReq* other) {
  if (other != this) {
    std::swap(clientversion_, other->clientversion_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(notifyid_, other->notifyid_);
    std::swap(username_, other->username_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(userid_, other->userid_);
    std::swap(playerid_, other->playerid_);
    std::swap(job_, other->job_);
    std::swap(logintype_, other->logintype_);
    std::swap(authtype_, other->authtype_);
    std::swap(authkey_, other->authkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginReq_descriptor_;
  metadata.reflection = LoginReq_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LoginReply_LoginType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginReply_LoginType_descriptor_;
}
bool LoginReply_LoginType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LoginReply_LoginType LoginReply::NewRole;
const LoginReply_LoginType LoginReply::OldRole;
const LoginReply_LoginType LoginReply::LoginType_MIN;
const LoginReply_LoginType LoginReply::LoginType_MAX;
const int LoginReply::LoginType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LoginReply::kUseridFieldNumber;
#endif  // !_MSC_VER

LoginReply::LoginReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginReply::InitAsDefaultInstance() {
}

LoginReply::LoginReply(const LoginReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginReply::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginReply::~LoginReply() {
  SharedDtor();
}

void LoginReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginReply_descriptor_;
}

const LoginReply& LoginReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();
  return *default_instance_;
}

LoginReply* LoginReply::default_instance_ = NULL;

LoginReply* LoginReply::New() const {
  return new LoginReply;
}

void LoginReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 userid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 userid = 6;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 userid = 6;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 userid = 6;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginReply::MergeFrom(const LoginReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginReply::CopyFrom(const LoginReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LoginReply::Swap(LoginReply* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginReply_descriptor_;
  metadata.reflection = LoginReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EncryptKeyNtf::kPublicKeyFieldNumber;
const int EncryptKeyNtf::kPrivateKeyFieldNumber;
const int EncryptKeyNtf::kAuthKeyFieldNumber;
#endif  // !_MSC_VER

EncryptKeyNtf::EncryptKeyNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EncryptKeyNtf::InitAsDefaultInstance() {
}

EncryptKeyNtf::EncryptKeyNtf(const EncryptKeyNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EncryptKeyNtf::SharedCtor() {
  _cached_size_ = 0;
  publickey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  privatekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  authkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EncryptKeyNtf::~EncryptKeyNtf() {
  SharedDtor();
}

void EncryptKeyNtf::SharedDtor() {
  if (publickey_ != &::google::protobuf::internal::kEmptyString) {
    delete publickey_;
  }
  if (privatekey_ != &::google::protobuf::internal::kEmptyString) {
    delete privatekey_;
  }
  if (authkey_ != &::google::protobuf::internal::kEmptyString) {
    delete authkey_;
  }
  if (this != default_instance_) {
  }
}

void EncryptKeyNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EncryptKeyNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EncryptKeyNtf_descriptor_;
}

const EncryptKeyNtf& EncryptKeyNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();
  return *default_instance_;
}

EncryptKeyNtf* EncryptKeyNtf::default_instance_ = NULL;

EncryptKeyNtf* EncryptKeyNtf::New() const {
  return new EncryptKeyNtf;
}

void EncryptKeyNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_publickey()) {
      if (publickey_ != &::google::protobuf::internal::kEmptyString) {
        publickey_->clear();
      }
    }
    if (has_privatekey()) {
      if (privatekey_ != &::google::protobuf::internal::kEmptyString) {
        privatekey_->clear();
      }
    }
    if (has_authkey()) {
      if (authkey_ != &::google::protobuf::internal::kEmptyString) {
        authkey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EncryptKeyNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string publicKey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_publickey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->publickey().data(), this->publickey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_privateKey;
        break;
      }

      // required string privateKey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_privateKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_privatekey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->privatekey().data(), this->privatekey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_authKey;
        break;
      }

      // required string authKey = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_authKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->authkey().data(), this->authkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EncryptKeyNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string publicKey = 1;
  if (has_publickey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->publickey().data(), this->publickey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->publickey(), output);
  }

  // required string privateKey = 2;
  if (has_privatekey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->privatekey().data(), this->privatekey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->privatekey(), output);
  }

  // required string authKey = 3;
  if (has_authkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authkey().data(), this->authkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->authkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EncryptKeyNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string publicKey = 1;
  if (has_publickey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->publickey().data(), this->publickey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->publickey(), target);
  }

  // required string privateKey = 2;
  if (has_privatekey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->privatekey().data(), this->privatekey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->privatekey(), target);
  }

  // required string authKey = 3;
  if (has_authkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authkey().data(), this->authkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->authkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EncryptKeyNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string publicKey = 1;
    if (has_publickey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->publickey());
    }

    // required string privateKey = 2;
    if (has_privatekey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->privatekey());
    }

    // required string authKey = 3;
    if (has_authkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EncryptKeyNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EncryptKeyNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EncryptKeyNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EncryptKeyNtf::MergeFrom(const EncryptKeyNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_publickey()) {
      set_publickey(from.publickey());
    }
    if (from.has_privatekey()) {
      set_privatekey(from.privatekey());
    }
    if (from.has_authkey()) {
      set_authkey(from.authkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EncryptKeyNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EncryptKeyNtf::CopyFrom(const EncryptKeyNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptKeyNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void EncryptKeyNtf::Swap(EncryptKeyNtf* other) {
  if (other != this) {
    std::swap(publickey_, other->publickey_);
    std::swap(privatekey_, other->privatekey_);
    std::swap(authkey_, other->authkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EncryptKeyNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EncryptKeyNtf_descriptor_;
  metadata.reflection = EncryptKeyNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuthReq::kAuthKeyFieldNumber;
#endif  // !_MSC_VER

AuthReq::AuthReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuthReq::InitAsDefaultInstance() {
}

AuthReq::AuthReq(const AuthReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuthReq::SharedCtor() {
  _cached_size_ = 0;
  authkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthReq::~AuthReq() {
  SharedDtor();
}

void AuthReq::SharedDtor() {
  if (authkey_ != &::google::protobuf::internal::kEmptyString) {
    delete authkey_;
  }
  if (this != default_instance_) {
  }
}

void AuthReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthReq_descriptor_;
}

const AuthReq& AuthReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();
  return *default_instance_;
}

AuthReq* AuthReq::default_instance_ = NULL;

AuthReq* AuthReq::New() const {
  return new AuthReq;
}

void AuthReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_authkey()) {
      if (authkey_ != &::google::protobuf::internal::kEmptyString) {
        authkey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string authKey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->authkey().data(), this->authkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuthReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string authKey = 1;
  if (has_authkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authkey().data(), this->authkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->authkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuthReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string authKey = 1;
  if (has_authkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authkey().data(), this->authkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->authkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuthReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string authKey = 1;
    if (has_authkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthReq::MergeFrom(const AuthReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_authkey()) {
      set_authkey(from.authkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthReq::CopyFrom(const AuthReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AuthReq::Swap(AuthReq* other) {
  if (other != this) {
    std::swap(authkey_, other->authkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthReq_descriptor_;
  metadata.reflection = AuthReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuthAck::kResultFieldNumber;
const int AuthAck::kEncryptKeyFieldNumber;
#endif  // !_MSC_VER

AuthAck::AuthAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuthAck::InitAsDefaultInstance() {
}

AuthAck::AuthAck(const AuthAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuthAck::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  encryptkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthAck::~AuthAck() {
  SharedDtor();
}

void AuthAck::SharedDtor() {
  if (encryptkey_ != &::google::protobuf::internal::kEmptyString) {
    delete encryptkey_;
  }
  if (this != default_instance_) {
  }
}

void AuthAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthAck_descriptor_;
}

const AuthAck& AuthAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();
  return *default_instance_;
}

AuthAck* AuthAck::default_instance_ = NULL;

AuthAck* AuthAck::New() const {
  return new AuthAck;
}

void AuthAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_encryptkey()) {
      if (encryptkey_ != &::google::protobuf::internal::kEmptyString) {
        encryptkey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Msg.Protocol.AuthResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Msg::Protocol::AuthResult_IsValid(value)) {
            set_result(static_cast< ::Msg::Protocol::AuthResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_encryptKey;
        break;
      }

      // required string encryptKey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_encryptKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_encryptkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->encryptkey().data(), this->encryptkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuthAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Msg.Protocol.AuthResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // required string encryptKey = 2;
  if (has_encryptkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->encryptkey().data(), this->encryptkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->encryptkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuthAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Msg.Protocol.AuthResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // required string encryptKey = 2;
  if (has_encryptkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->encryptkey().data(), this->encryptkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->encryptkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuthAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Msg.Protocol.AuthResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // required string encryptKey = 2;
    if (has_encryptkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->encryptkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthAck::MergeFrom(const AuthAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_encryptkey()) {
      set_encryptkey(from.encryptkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthAck::CopyFrom(const AuthAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AuthAck::Swap(AuthAck* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(encryptkey_, other->encryptkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthAck_descriptor_;
  metadata.reflection = AuthAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PingPong::kPingpongFieldNumber;
const int PingPong::kTimeFieldNumber;
#endif  // !_MSC_VER

PingPong::PingPong()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PingPong::InitAsDefaultInstance() {
}

PingPong::PingPong(const PingPong& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PingPong::SharedCtor() {
  _cached_size_ = 0;
  pingpong_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PingPong::~PingPong() {
  SharedDtor();
}

void PingPong::SharedDtor() {
  if (pingpong_ != &::google::protobuf::internal::kEmptyString) {
    delete pingpong_;
  }
  if (this != default_instance_) {
  }
}

void PingPong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PingPong::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PingPong_descriptor_;
}

const PingPong& PingPong::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();
  return *default_instance_;
}

PingPong* PingPong::default_instance_ = NULL;

PingPong* PingPong::New() const {
  return new PingPong;
}

void PingPong::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pingpong()) {
      if (pingpong_ != &::google::protobuf::internal::kEmptyString) {
        pingpong_->clear();
      }
    }
    time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PingPong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string pingpong = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pingpong()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pingpong().data(), this->pingpong().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // required uint64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PingPong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string pingpong = 1;
  if (has_pingpong()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pingpong().data(), this->pingpong().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->pingpong(), output);
  }

  // required uint64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PingPong::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string pingpong = 1;
  if (has_pingpong()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pingpong().data(), this->pingpong().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pingpong(), target);
  }

  // required uint64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PingPong::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string pingpong = 1;
    if (has_pingpong()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pingpong());
    }

    // required uint64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PingPong::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PingPong* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PingPong*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PingPong::MergeFrom(const PingPong& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pingpong()) {
      set_pingpong(from.pingpong());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PingPong::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingPong::CopyFrom(const PingPong& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingPong::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PingPong::Swap(PingPong* other) {
  if (other != this) {
    std::swap(pingpong_, other->pingpong_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PingPong::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PingPong_descriptor_;
  metadata.reflection = PingPong_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReadyRequest::kIsReadyFieldNumber;
#endif  // !_MSC_VER

ReadyRequest::ReadyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReadyRequest::InitAsDefaultInstance() {
}

ReadyRequest::ReadyRequest(const ReadyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReadyRequest::SharedCtor() {
  _cached_size_ = 0;
  is_ready_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadyRequest::~ReadyRequest() {
  SharedDtor();
}

void ReadyRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReadyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadyRequest_descriptor_;
}

const ReadyRequest& ReadyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();
  return *default_instance_;
}

ReadyRequest* ReadyRequest::default_instance_ = NULL;

ReadyRequest* ReadyRequest::New() const {
  return new ReadyRequest;
}

void ReadyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_ready_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 is_ready = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_ready_)));
          set_has_is_ready();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReadyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 is_ready = 1;
  if (has_is_ready()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->is_ready(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReadyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 is_ready = 1;
  if (has_is_ready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->is_ready(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReadyRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 is_ready = 1;
    if (has_is_ready()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_ready());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadyRequest::MergeFrom(const ReadyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_ready()) {
      set_is_ready(from.is_ready());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadyRequest::CopyFrom(const ReadyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadyRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReadyRequest::Swap(ReadyRequest* other) {
  if (other != this) {
    std::swap(is_ready_, other->is_ready_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadyRequest_descriptor_;
  metadata.reflection = ReadyRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoveRequest::kXFieldNumber;
const int MoveRequest::kYFieldNumber;
const int MoveRequest::kZFieldNumber;
#endif  // !_MSC_VER

MoveRequest::MoveRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoveRequest::InitAsDefaultInstance() {
}

MoveRequest::MoveRequest(const MoveRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoveRequest::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveRequest::~MoveRequest() {
  SharedDtor();
}

void MoveRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveRequest_descriptor_;
}

const MoveRequest& MoveRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();
  return *default_instance_;
}

MoveRequest* MoveRequest::default_instance_ = NULL;

MoveRequest* MoveRequest::New() const {
  return new MoveRequest;
}

void MoveRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // required float z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoveRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoveRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // required float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveRequest::MergeFrom(const MoveRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveRequest::CopyFrom(const MoveRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void MoveRequest::Swap(MoveRequest* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveRequest_descriptor_;
  metadata.reflection = MoveRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoveNotify::kObjIdFieldNumber;
const int MoveNotify::kFromXFieldNumber;
const int MoveNotify::kFromYFieldNumber;
const int MoveNotify::kFromZFieldNumber;
const int MoveNotify::kToXFieldNumber;
const int MoveNotify::kToYFieldNumber;
const int MoveNotify::kToZFieldNumber;
#endif  // !_MSC_VER

MoveNotify::MoveNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoveNotify::InitAsDefaultInstance() {
}

MoveNotify::MoveNotify(const MoveNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoveNotify::SharedCtor() {
  _cached_size_ = 0;
  obj_id_ = GOOGLE_LONGLONG(0);
  from_x_ = 0;
  from_y_ = 0;
  from_z_ = 0;
  to_x_ = 0;
  to_y_ = 0;
  to_z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveNotify::~MoveNotify() {
  SharedDtor();
}

void MoveNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoveNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveNotify_descriptor_;
}

const MoveNotify& MoveNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();
  return *default_instance_;
}

MoveNotify* MoveNotify::default_instance_ = NULL;

MoveNotify* MoveNotify::New() const {
  return new MoveNotify;
}

void MoveNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    obj_id_ = GOOGLE_LONGLONG(0);
    from_x_ = 0;
    from_y_ = 0;
    from_z_ = 0;
    to_x_ = 0;
    to_y_ = 0;
    to_z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 obj_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &obj_id_)));
          set_has_obj_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_from_x;
        break;
      }

      // required float from_x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_from_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &from_x_)));
          set_has_from_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_from_y;
        break;
      }

      // required float from_y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_from_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &from_y_)));
          set_has_from_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_from_z;
        break;
      }

      // required float from_z = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_from_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &from_z_)));
          set_has_from_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_to_x;
        break;
      }

      // required float to_x = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_to_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &to_x_)));
          set_has_to_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_to_y;
        break;
      }

      // required float to_y = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_to_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &to_y_)));
          set_has_to_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_to_z;
        break;
      }

      // required float to_z = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_to_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &to_z_)));
          set_has_to_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoveNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 obj_id = 1;
  if (has_obj_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->obj_id(), output);
  }

  // required float from_x = 2;
  if (has_from_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->from_x(), output);
  }

  // required float from_y = 3;
  if (has_from_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->from_y(), output);
  }

  // required float from_z = 4;
  if (has_from_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->from_z(), output);
  }

  // required float to_x = 5;
  if (has_to_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->to_x(), output);
  }

  // required float to_y = 6;
  if (has_to_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->to_y(), output);
  }

  // required float to_z = 7;
  if (has_to_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->to_z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoveNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 obj_id = 1;
  if (has_obj_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->obj_id(), target);
  }

  // required float from_x = 2;
  if (has_from_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->from_x(), target);
  }

  // required float from_y = 3;
  if (has_from_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->from_y(), target);
  }

  // required float from_z = 4;
  if (has_from_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->from_z(), target);
  }

  // required float to_x = 5;
  if (has_to_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->to_x(), target);
  }

  // required float to_y = 6;
  if (has_to_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->to_y(), target);
  }

  // required float to_z = 7;
  if (has_to_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->to_z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoveNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 obj_id = 1;
    if (has_obj_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->obj_id());
    }

    // required float from_x = 2;
    if (has_from_x()) {
      total_size += 1 + 4;
    }

    // required float from_y = 3;
    if (has_from_y()) {
      total_size += 1 + 4;
    }

    // required float from_z = 4;
    if (has_from_z()) {
      total_size += 1 + 4;
    }

    // required float to_x = 5;
    if (has_to_x()) {
      total_size += 1 + 4;
    }

    // required float to_y = 6;
    if (has_to_y()) {
      total_size += 1 + 4;
    }

    // required float to_z = 7;
    if (has_to_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveNotify::MergeFrom(const MoveNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obj_id()) {
      set_obj_id(from.obj_id());
    }
    if (from.has_from_x()) {
      set_from_x(from.from_x());
    }
    if (from.has_from_y()) {
      set_from_y(from.from_y());
    }
    if (from.has_from_z()) {
      set_from_z(from.from_z());
    }
    if (from.has_to_x()) {
      set_to_x(from.to_x());
    }
    if (from.has_to_y()) {
      set_to_y(from.to_y());
    }
    if (from.has_to_z()) {
      set_to_z(from.to_z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveNotify::CopyFrom(const MoveNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void MoveNotify::Swap(MoveNotify* other) {
  if (other != this) {
    std::swap(obj_id_, other->obj_id_);
    std::swap(from_x_, other->from_x_);
    std::swap(from_y_, other->from_y_);
    std::swap(from_z_, other->from_z_);
    std::swap(to_x_, other->to_x_);
    std::swap(to_y_, other->to_y_);
    std::swap(to_z_, other->to_z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveNotify_descriptor_;
  metadata.reflection = MoveNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddObjNotify::kObjIdFieldNumber;
const int AddObjNotify::kXFieldNumber;
const int AddObjNotify::kYFieldNumber;
const int AddObjNotify::kZFieldNumber;
#endif  // !_MSC_VER

AddObjNotify::AddObjNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddObjNotify::InitAsDefaultInstance() {
}

AddObjNotify::AddObjNotify(const AddObjNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddObjNotify::SharedCtor() {
  _cached_size_ = 0;
  obj_id_ = GOOGLE_LONGLONG(0);
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddObjNotify::~AddObjNotify() {
  SharedDtor();
}

void AddObjNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddObjNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddObjNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddObjNotify_descriptor_;
}

const AddObjNotify& AddObjNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();
  return *default_instance_;
}

AddObjNotify* AddObjNotify::default_instance_ = NULL;

AddObjNotify* AddObjNotify::New() const {
  return new AddObjNotify;
}

void AddObjNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    obj_id_ = GOOGLE_LONGLONG(0);
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddObjNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 obj_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &obj_id_)));
          set_has_obj_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_x;
        break;
      }

      // required float x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_y;
        break;
      }

      // required float y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_z;
        break;
      }

      // required float z = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddObjNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 obj_id = 1;
  if (has_obj_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->obj_id(), output);
  }

  // required float x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // required float y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

  // required float z = 4;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddObjNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 obj_id = 1;
  if (has_obj_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->obj_id(), target);
  }

  // required float x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x(), target);
  }

  // required float y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y(), target);
  }

  // required float z = 4;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddObjNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 obj_id = 1;
    if (has_obj_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->obj_id());
    }

    // required float x = 2;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 3;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // required float z = 4;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddObjNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddObjNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddObjNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddObjNotify::MergeFrom(const AddObjNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obj_id()) {
      set_obj_id(from.obj_id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddObjNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddObjNotify::CopyFrom(const AddObjNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddObjNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void AddObjNotify::Swap(AddObjNotify* other) {
  if (other != this) {
    std::swap(obj_id_, other->obj_id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddObjNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddObjNotify_descriptor_;
  metadata.reflection = AddObjNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveObjNotify::kObjIdFieldNumber;
#endif  // !_MSC_VER

RemoveObjNotify::RemoveObjNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveObjNotify::InitAsDefaultInstance() {
}

RemoveObjNotify::RemoveObjNotify(const RemoveObjNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveObjNotify::SharedCtor() {
  _cached_size_ = 0;
  obj_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveObjNotify::~RemoveObjNotify() {
  SharedDtor();
}

void RemoveObjNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RemoveObjNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveObjNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveObjNotify_descriptor_;
}

const RemoveObjNotify& RemoveObjNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();
  return *default_instance_;
}

RemoveObjNotify* RemoveObjNotify::default_instance_ = NULL;

RemoveObjNotify* RemoveObjNotify::New() const {
  return new RemoveObjNotify;
}

void RemoveObjNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    obj_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveObjNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 obj_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &obj_id_)));
          set_has_obj_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveObjNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 obj_id = 1;
  if (has_obj_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->obj_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveObjNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 obj_id = 1;
  if (has_obj_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->obj_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveObjNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 obj_id = 1;
    if (has_obj_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->obj_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveObjNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveObjNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveObjNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveObjNotify::MergeFrom(const RemoveObjNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obj_id()) {
      set_obj_id(from.obj_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveObjNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveObjNotify::CopyFrom(const RemoveObjNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveObjNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RemoveObjNotify::Swap(RemoveObjNotify* other) {
  if (other != this) {
    std::swap(obj_id_, other->obj_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveObjNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveObjNotify_descriptor_;
  metadata.reflection = RemoveObjNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol
}  // namespace Msg

// @@protoc_insertion_point(global_scope)
